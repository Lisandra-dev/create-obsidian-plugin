import {
  App,
  Notice,
  Plugin,
} from "obsidian";
import {<%= plugin.className %>SettingsTab} from "./settings";
import {<%= plugin.className %>Settings, DEFAULT_SETTINGS} from "./interface";
import {<%= plugin.className %>Modals} from "./modals";
import i18next from "i18next";
import { resources, translationLanguage } from "./i18n/i18next";


export default class <%= plugin.className %> extends Plugin {
  settings: <%= plugin.className %>Settings;

  async onload() {
    console.log(`<%= plugin.className %> v.${this.manifest.version} (lang: ${translationLanguage}) loaded.`);
    i18next.init({
			lng: translationLanguage,
			fallbackLng: "en",
			resources: resources,
			returnNull: false,
		});
    await this.loadSettings();

    this.addRibbonIcon("dice", "Sample Plugin", () => {
      new Notice("This is a notice!");
    });

    this.addStatusBarItem().setText("Status Bar Text");

    this.addCommand({
      id: "open-sample-modal",
      name: "Open Sample Modal",
      // callback: () => {
      // 	console.log('Simple Callback');
      // },
      checkCallback: (checking: boolean) => {
        let leaf = this.app.workspace.activeLeaf;
        if (leaf) {
          if (!checking) {
            new <%= plugin.className %>Modals(this.app).open();
          }
          return true;
        }
        return false;
      },
    });

    this.addSettingTab(new <%= plugin.className %>SettingsTab(this.app, this));

    this.registerCodeMirror((cm: CodeMirror.Editor) => {
      console.log("codemirror", cm);
    });

    this.registerDomEvent(document, "click", (evt: MouseEvent) => {
      console.log("click", evt);
    });

    this.registerInterval(
      window.setInterval(() => console.log("setInterval"), 5 * 60 * 1000)
    );
  }

  onunload() {
    console.log("unloading plugin");
  }

  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }

  async saveSettings() {
    await this.saveData(this.settings);
  }
}



